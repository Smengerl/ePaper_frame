substitutions:
  name: "epaper-display"
  friendly_name: "ePaper Display"
  comment: "ePaper Display in picture frame"
  project_name: epaper_display.esphome

  TAG: "epaper-display.yaml"


  api_key: "Tl2rJtTss0xoQ792MStUvP3Lopg0qZX50jRWxrQ8y3E"
  ota_pw: "c94846b481b42dc19071f84f059318cb"
  fallback_hotspot_ssid: "EPaper Fallback Hotspot"
  fallback_hotspot_pw: "lNsuXkde0t4d"


  initial_image_url: http://homeassistant.local:8123/local/output.png

packages:
  device_basics: !include epaper_display_packages/device_basics.yaml
  debug_basics: !include shared_packages/debug_basics.yaml
  deep_sleep:  !include shared_packages/deep_sleep.yaml

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: ${comment}
  #min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: ${project_name} 
    version: '1.0'
  on_boot:
    priority: -100 # Call this script as late as possible to make sure the event is dispatched to HA
    then:
      - light.turn_on: onboard_led  # Turn on the LED during startup

      - wait_until: api.connected # Wait for API to be conected and then send event informing about startup reason
      - lambda: |-
          if (id(auto_load_render).state) {
            ESP_LOGI("${TAG}", "Automatic downloading and rendering on startup started");
            id(online_image_id).update();
          } else {
            ESP_LOGD("${TAG}", "No automatic downloading and rendering on startup");
          }







# Onboard LED control
output:
  - platform: gpio
    id: onboard_led_output
    pin: GPIO2  # Default onboard LED pin for most ESP32 boards

light: 
  - platform: status_led
    name: "Onboard Status LED"
    icon: "mdi:led-on"
    id: "onboard_led"
    output: onboard_led_output
    entity_category: diagnostic
    internal: true




# event configuration
event:

  - platform: template
    name: Rendering
    id: rendering_events
    icon: "mdi:brush"
    event_types:
      - render_complete
    #on_event:
    #  then:
    #    - lambda: |-
    #        ESP_LOGD("${TAG}", "Render complete event %s triggered.", event_type.c_str());

  - platform: template
    name: Image Downloading
    id: image_downloading_events
    icon: "mdi:download"
    event_types:
      - image_downloading_complete
      - image_downloading_failed
    #on_event:
    #  then:
    #    - lambda: |-
    #        ESP_LOGD("${TAG}", "Image downloading complete event %s triggered.", event_type.c_str());




# Controls whether the display shall automatically download and render the image on startup
switch:
  - platform: template
    name: "Download and render on startup"
    id: auto_load_render
    icon: "mdi:cloud-download-outline"
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true






#time:
#  - platform: homeassistant
#    id: esptime





#-------------------------------------------
# AUTO REFRESH DISPLAY
# Automatically refresh display after specified number of hours
# Value 0 means no auto refresh
#-------------------------------------------
interval:
  - interval: 1h  # Base interval for the check
    then:
      - lambda: |-
          if (id(auto_screen_refresh).state > 0) {
            id(auto_refresh_counter)++;

            if (id(auto_refresh_counter) >= id(auto_screen_refresh).state) {
              id(auto_refresh_counter) = 0;  // Reset counter
              ESP_LOGI("${TAG}", "Timer triggered re-rendering");
              id(eink_display).update();
            }
          }

number:
  - platform: template
    name: "Auto Screen refresh"
    id: auto_screen_refresh
    unit_of_measurement: "h"
    icon: "mdi:refresh-auto"
    optimistic: true
    min_value: 0
    max_value: 96
    step: 1
    initial_value: 0
    on_value:
      then:
        - lambda: |-
            id(auto_refresh_counter) = 0;  // Reset counter
            if (x == 0) {
              ESP_LOGI("${TAG}", "Disable auto screen refresh");
            } else {
              ESP_LOGI("${TAG}", "Auto screen refresh updated: %.0fh", x);
            }


globals:
  - id: auto_refresh_counter
    type: int
    restore_value: no
    initial_value: '0'
#-------------------------------------------






  - id: home_assistant_local_ip
    type: std::string
    restore_value: yes
    max_restore_data_length: 50
    initial_value: '"homeassistant.local"'

button:
  - platform: template
    name: "Reload image"
    entity_category: diagnostic
    on_press:
      - lambda: |-
          id(online_image_id).update();

  - platform: template
    name: "Render"
    entity_category: diagnostic
    on_press:
      - lambda: |-
          id(eink_display).update();

text:
  - platform: template
    id: image_url
    name: "Image URL"
    icon: "mdi:image"
    mode: text
    optimistic: true
    restore_value: yes
    initial_value: $initial_image_url
    on_value: 
      then:
        - online_image.set_url:
            url: !lambda |-
              return id(image_url).state.c_str();
            id: online_image_id



#-------------------------------------------
# API
# Enable Home Assistant API
# Expose all relevant functions for scripting in HA e.g. in automations
#-------------------------------------------
api:
  on_client_connected:
    lambda: |-
      ESP_LOGW("${TAG}", "Client %s connected to API with IP %s", client_info.c_str(), client_address.c_str());
      id(home_assistant_local_ip) = client_address.c_str(); // Example value: 192.168.31.177



  encryption:
    key: ${api_key}

  actions:
  - action: epaper_reload_image
    then:
      - lambda: |-
          id(online_image_id).update();

  - action: epaper_render
    then:
      - lambda: |-
          id(eink_display).update();

  - action: epaper_set_image_url
    variables:
      url: string
    then:
      - online_image.set_url:
          url: !lambda |-
            ESP_LOGI("${TAG}", "Set image URL: %s", url.c_str());

            auto call = id(image_url).make_call();
            call.set_value(url.c_str());
            call.perform();

            return url.c_str();
          id: online_image_id

  - action: epaper_set_local_image_url
    variables:
      local_url: string
    then:
      - online_image.set_url:
          url: !lambda |-
            static char buf[200];
            snprintf(buf, sizeof(buf), "http://%s:8123/local/%s", id(home_assistant_local_ip).c_str(), local_url.c_str());
            ESP_LOGI("${TAG}", "Set local URL: %s --> %s", local_url.c_str(), buf);

            auto call = id(image_url).make_call();
            call.set_value(buf);
            call.perform();

            return buf;
          id: online_image_id

#  - action: epaper_sleep_for
#    variables:
#      min: int
#    then:
#      - lambda: |-
#          ESP_LOGI("${TAG}", "Sleep for %d min", min);
#          id(onboard_led).turn_off(); // Turn off the LED before deep sleep
#
#          id(deep_sleep_id).set_sleep_duration(min*60*1000); // parameter is in min, needs to be converted to ms
#          id(deep_sleep_id).begin_sleep();
#
#  - action: epaper_sleep_until
#    variables:
#      target_minute: int
#      target_hour: int
#    then:
#      - lambda: |-
#          if (target_minute>=0 && target_minute<60) {
#            if (target_hour>=0 && target_hour<24) {
#
#              time_t current_time_t = id(esptime).timestamp_now();
#              struct tm *timeinfo = localtime(&current_time_t);
#              timeinfo->tm_hour = (unsigned int)target_hour;
#              timeinfo->tm_min = target_minute;
#              timeinfo->tm_sec = 0;
#              time_t sleep_until_time_t = mktime(timeinfo);
#
#              if (sleep_until_time_t <= current_time_t) {
#                // Falls die Zielzeit an dem Tag bereits vergangen ist, einen Tag hinzufÃ¼gen
#                sleep_until_time_t += 24 * 60 * 60;
#              }
#
#              int difference = (int)difftime(sleep_until_time_t, current_time_t); // Unterschied in Sekunden
#
#              ESP_LOGW("${TAG}", "Sleep until %02d:%02d equals sleeping for %ds (%02d:%02d:%02d)", target_hour, target_minute, difference, difference / 3600, (difference % 3600) / 60, difference % 60);
#              id(onboard_led).turn_off(); // Turn off the LED before deep sleep
#              id(deep_sleep_id).set_sleep_duration(difference*1000); 
#              id(deep_sleep_id).begin_sleep();
#
#            } else {
#              ESP_LOGW("${TAG}", "hour need to be a value between 0-23");
#            }
#          } else {
#            ESP_LOGW("${TAG}", "min need to be a value between 0-60");
#          }














image:
  - file: "images/offline.png"
    id: offline_image_id
    type: BINARY




online_image:
  - url: $initial_image_url
    format: PNG
    id: online_image_id

    buffer_size: 32768
    resize: ${display_pixel_width}x${display_pixel_height}
    type: BINARY
    placeholder: offline_image_id # optional
    on_download_finished:
      - then:
        - lambda: |-
            ESP_LOGI("online_image", "Image download finished");
            id(image_downloading_events).trigger("image_downloading_complete");
        - component.update: eink_display
    on_error:
        - lambda: |-
            ESP_LOGE("online_image", "Could not download the image");
            id(image_downloading_events).trigger("image_downloading_failed");





# Set up the HTTP request component
# HTTP request component to get picture URLs
http_request:
  #Arduino does not support SSL verification; on arduino this must be explicitly disabled (on ESP-IDF it's not necessary).
  verify_ssl: false
  useragent: esphome/1.0
  timeout: 120s





# Now render everything on the ePaper screen.
# See: https://esphome.io/components/display/waveshare_epaper.html
display:
  - platform: waveshare_epaper
    id: eink_display
    cs_pin: $gpio_cs_pin
    reset_pin: $gpio_reset_pin
    dc_pin: $gpio_dc_pin
    busy_pin:
      number: $gpio_busy_pin
      inverted: $gpio_busy_pin_inverted
    reset_duration: $reset_duration
    model: $display_model
    # full_update_every: $full_update_every
    update_interval: never # manual refresh only via component.update / Example for alternative: 60s
    rotation: $display_rotation
    lambda: |-
      static const char *TAG = "${TAG} - Rendering cycle";

      ESP_LOGW(TAG, "Rendering...");
      id(deep_sleep_id).prevent_deep_sleep();

      it.fill(COLOR_OFF);
      if(id(wifi_id).is_connected()) {
        // Fullscreen online image
        it.image(${display_min_pixel_x}, ${display_min_pixel_y}, id(online_image_id), COLOR_OFF, COLOR_ON);
      } else { 
        ESP_LOGW(TAG, "Wifi not connected. Using offline image");
        // Centered offline image
        int mid_x = $display_min_pixel_x + $display_pixel_width / 2;
        int mid_y = $display_min_pixel_y + $display_pixel_height / 2;
        it.image(mid_x - id(offline_image_id).get_width()/2, mid_y - id(offline_image_id).get_height()/2, id(offline_image_id), COLOR_OFF, COLOR_ON);
      }

      ESP_LOGW(TAG, "Rendering done");
      id(deep_sleep_id).allow_deep_sleep();
      id(rendering_events).trigger("render_complete");
